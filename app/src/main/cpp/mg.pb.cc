// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_mg_2eproto() {
  delete MAGIC_CODE::default_instance_;
}

void protobuf_AddDesc_mg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  MAGIC_CODE::default_instance_ = new MAGIC_CODE();
  MAGIC_CODE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mg_2eproto {
  StaticDescriptorInitializer_mg_2eproto() {
    protobuf_AddDesc_mg_2eproto();
  }
} static_descriptor_initializer_mg_2eproto_;


// ===================================================================

bool MAGIC_CODE_MagicCodeAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MAGIC_CODE_MagicCodeAction MAGIC_CODE::GENERATEPSEUDOR;
const MAGIC_CODE_MagicCodeAction MAGIC_CODE::VERIFYMAGICCODE;
const MAGIC_CODE_MagicCodeAction MAGIC_CODE::FEATUREUNLOCK;
const MAGIC_CODE_MagicCodeAction MAGIC_CODE::MagicCodeAction_MIN;
const MAGIC_CODE_MagicCodeAction MAGIC_CODE::MagicCodeAction_MAX;
const int MAGIC_CODE::MagicCodeAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MAGIC_CODE::kMGActionFieldNumber;
const int MAGIC_CODE::kMachinePoweronTimeFieldNumber;
const int MAGIC_CODE::kSoftwareVersionFieldNumber;
const int MAGIC_CODE::kMacAddressFieldNumber;
const int MAGIC_CODE::kSerilNumberFieldNumber;
const int MAGIC_CODE::kFeatureIndexFieldNumber;
const int MAGIC_CODE::kKeyFieldNumber;
#endif  // !_MSC_VER

MAGIC_CODE::MAGIC_CODE()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MAGIC_CODE::InitAsDefaultInstance() {
}

MAGIC_CODE::MAGIC_CODE(const MAGIC_CODE& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MAGIC_CODE::SharedCtor() {
  _cached_size_ = 0;
  mgaction_ = 1;
  machinepowerontime_ = GOOGLE_LONGLONG(0);
  softwareversion_ = 0;
  macaddress_ = 0;
  serilnumber_ = 0;
  featureindex_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MAGIC_CODE::~MAGIC_CODE() {
  SharedDtor();
}

void MAGIC_CODE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MAGIC_CODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MAGIC_CODE& MAGIC_CODE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mg_2eproto();  return *default_instance_;
}

MAGIC_CODE* MAGIC_CODE::default_instance_ = NULL;

MAGIC_CODE* MAGIC_CODE::New() const {
  return new MAGIC_CODE;
}

void MAGIC_CODE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mgaction_ = 1;
    machinepowerontime_ = GOOGLE_LONGLONG(0);
    softwareversion_ = 0;
    macaddress_ = 0;
    serilnumber_ = 0;
    featureindex_ = 0;
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MAGIC_CODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MAGIC_CODE.MagicCodeAction MGAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAGIC_CODE_MagicCodeAction_IsValid(value)) {
            set_mgaction(static_cast< ::MAGIC_CODE_MagicCodeAction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MachinePoweronTime;
        break;
      }
      
      // required int64 MachinePoweronTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MachinePoweronTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &machinepowerontime_)));
          set_has_machinepowerontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SoftwareVersion;
        break;
      }
      
      // required int32 SoftwareVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SoftwareVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &softwareversion_)));
          set_has_softwareversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MacAddress;
        break;
      }
      
      // required int32 MacAddress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MacAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &macaddress_)));
          set_has_macaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SerilNumber;
        break;
      }
      
      // required int32 SerilNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SerilNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serilnumber_)));
          set_has_serilnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FeatureIndex;
        break;
      }
      
      // required int32 FeatureIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FeatureIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featureindex_)));
          set_has_featureindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Key;
        break;
      }
      
      // required int32 Key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MAGIC_CODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MAGIC_CODE.MagicCodeAction MGAction = 1;
  if (has_mgaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mgaction(), output);
  }
  
  // required int64 MachinePoweronTime = 2;
  if (has_machinepowerontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->machinepowerontime(), output);
  }
  
  // required int32 SoftwareVersion = 3;
  if (has_softwareversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->softwareversion(), output);
  }
  
  // required int32 MacAddress = 4;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->macaddress(), output);
  }
  
  // required int32 SerilNumber = 5;
  if (has_serilnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->serilnumber(), output);
  }
  
  // required int32 FeatureIndex = 6;
  if (has_featureindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->featureindex(), output);
  }
  
  // required int32 Key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->key(), output);
  }
  
}

int MAGIC_CODE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MAGIC_CODE.MagicCodeAction MGAction = 1;
    if (has_mgaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mgaction());
    }
    
    // required int64 MachinePoweronTime = 2;
    if (has_machinepowerontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->machinepowerontime());
    }
    
    // required int32 SoftwareVersion = 3;
    if (has_softwareversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->softwareversion());
    }
    
    // required int32 MacAddress = 4;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->macaddress());
    }
    
    // required int32 SerilNumber = 5;
    if (has_serilnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serilnumber());
    }
    
    // required int32 FeatureIndex = 6;
    if (has_featureindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featureindex());
    }
    
    // required int32 Key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAGIC_CODE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MAGIC_CODE*>(&from));
}

void MAGIC_CODE::MergeFrom(const MAGIC_CODE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mgaction()) {
      set_mgaction(from.mgaction());
    }
    if (from.has_machinepowerontime()) {
      set_machinepowerontime(from.machinepowerontime());
    }
    if (from.has_softwareversion()) {
      set_softwareversion(from.softwareversion());
    }
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
    if (from.has_serilnumber()) {
      set_serilnumber(from.serilnumber());
    }
    if (from.has_featureindex()) {
      set_featureindex(from.featureindex());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
}

void MAGIC_CODE::CopyFrom(const MAGIC_CODE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAGIC_CODE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MAGIC_CODE::Swap(MAGIC_CODE* other) {
  if (other != this) {
    std::swap(mgaction_, other->mgaction_);
    std::swap(machinepowerontime_, other->machinepowerontime_);
    std::swap(softwareversion_, other->softwareversion_);
    std::swap(macaddress_, other->macaddress_);
    std::swap(serilnumber_, other->serilnumber_);
    std::swap(featureindex_, other->featureindex_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MAGIC_CODE::GetTypeName() const {
  return "MAGIC_CODE";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
